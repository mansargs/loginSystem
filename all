EMAIL_USER=sargsyanmanvel97@gmail.com
EMAIL_PASS=qoclmdqkayjrpehf
BASE_URL=http://${HTTP_HOST}
DB_HOST=localhost
DB_USER=root
DB_PASS=Manvel
DB_NAME=login_system
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Login</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<form action="login.php" method="post" id="login-form">
		<input type="text" id="username" name="username" placeholder="Username" required>
		<input type="password" id="password" name="password" placeholder="Password" required>
		<input type="submit" value="Login">
		<a href="index.php">Don't have an account? Register here</a>
	</form>
</body>
</html>
<?php

require_once __DIR__ . '/vendor/autoload.php';

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use PHPMailer\PHPMailer\Exception;

$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();

function get_db_connection() {
	$conn = new mysqli($_ENV['DB_HOST'], $_ENV['DB_USER'], $_ENV['DB_PASS'], $_ENV['DB_NAME']);
	if ($conn->connect_error) {
		echo "<script>alert('Internal server error.');</script>";
		exit();
	}
	$conn->set_charset('utf8mb4');
	return $conn;
}

function send_verification_email($email, $username, $token) {
	global $BASE_URL;

	$mail = new PHPMailer(true);
	try {
		$mail->isSMTP();
		$mail->Host = 'smtp.gmail.com';
		$mail->SMTPAuth = true;
		$mail->Username = "$_ENV[EMAIL_USER]";
		$mail->Password = "$_ENV[EMAIL_PASS]";
		$mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
		$mail->Port = 587;

		$mail->setFrom($_ENV[EMAIL_USER], 'LoginSystem');
		$mail->addAddress($email, $username);

		$mail->isHTML(true);
		$mail->Subject = 'Verify Your Email Address';
		$verificationLink = $BASE_URL . '/verify.php?token=' . $token;
		$mail->Body = "
			<h2>Welcome, $username!</h2>
			<p>Please click the link below to verify your email:</p>
			<a href='$verificationLink' style='background: #f50707ff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;'>Verify Email</a>
			<p>This link expires in 24 hours.</p>
		";
		$mail->AltBody = "Welcome, $username! Verify your email: $verificationLink";

		$mail->send();
		return true;
	} catch (Exception $e) {
		error_log("Email error: {$mail->ErrorInfo}");
		return false;
	}
}

session_start();
?>
<?php
require_once __DIR__ . '/config.php';

if (!isset($_SESSION['user_id'])) {
	header('Location: login.html');
	exit;
}

$username = htmlspecialchars($_SESSION['username'] ?? '');

$flash = '';
if (isset($_SESSION['reg_success'])) {
	$flash = '<p style="color: green;">' . htmlspecialchars($_SESSION['reg_success']) . '</p>';
	unset($_SESSION['reg_success']);
} elseif (isset($_SESSION['reg_error'])) {
	$flash = '<p style="color: red;">' . htmlspecialchars($_SESSION['reg_error']) . '</p>';
	unset($_SESSION['reg_error']);
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Dashboard</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<div style="display: flex; flex-direction: column; align-items: center; padding: 50px;">
		<h3>Welcome, <?php echo $username; ?></h3>
		<?php echo $flash; ?>
		<a href="logout.php">Logout</a>
	</div>
</body>
</html>
<?php
session_start();
if (isset($_SESSION['alert'])) {
    echo "<script>alert('" . addslashes($_SESSION['alert']) . "');</script>";
    unset($_SESSION['alert']);
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Register</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<form action="register.php" method="post" id="reg-form">
		<input type="text" id="username" name="username" placeholder="Username" required>
		<input type="email" name="email" id="email" placeholder="Email" required>
		<input type="password" id="password" name="password" placeholder="Password" required>
		<input type="password" id="confirm_password" name="confirm_password" placeholder="Confirm Password" required>
		<input type="submit" value="Register">
		<a href="login.html">Already have an account? Login here</a>
	</form>
</body>
</html>
<?php
require_once __DIR__ . '/config.php';

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
	header('Location: login.html');
	exit;
}

$username = trim($_POST['username'] ?? '');
$password = $_POST['password'] ?? '';

if ($username === '' || $password === '') {
	echo '<script>alert(Username and password are required)</script>';
	exit;
}

$conn = get_db_connection();
$stmt = $conn->prepare('SELECT id, username, email, password_hash, verified FROM users WHERE username = ? LIMIT 1');
$stmt->bind_param('s', $username);
$stmt->execute();
$result = $stmt->get_result();
$user = $result->fetch_assoc();
$stmt->close();

if (!$user) {
	$conn->close();
	echo '<script>alert(Invalid username)</script>';
	exit ;
}

if (!password_verify($password, $user['password_hash'])) {
	$conn->close();
	echo '<script>alert(Invalid password)</script>';
	exit ;
}

if ($user['verified'] != 1) {
	$conn->close();
	echo '<script>alert(Account must be verified)</script>';
	exit ;
}

$_SESSION['user_id'] = $user['id'];
$_SESSION['username'] = $user['username'];

$conn->close();
header('Location: dashboard.php');
exit;
?>
<?php
require_once __DIR__ . '/config.php';

$_SESSION = [];
if (ini_get("session.use_cookies")) {
	$params = session_get_cookie_params();
	setcookie(session_name(), '', time() - 42000,
		$params["path"], $params["domain"],
		$params["secure"], $params["httponly"]
	);
}
session_destroy();

header('Location: login.html');
exit;
?>


<?php
session_start();
require_once __DIR__ . '/config.php';

// only accept POST
if ($_SERVER["REQUEST_METHOD"] !== "POST") {
	header('Location: index.php');
	exit;
}

function validate_username($str) {
	return preg_match('/^[A-Za-z0-9_]+$/', $str) === 1 && strlen($str) >= 4 && strlen($str) <= 24;
}

function validate_password($str) {
	return strlen($str) >= 8 && strlen($str) <= 64;
}

$username = trim($_POST['username'] ?? '');
$email = trim($_POST['email'] ?? '');
$password = $_POST['password'] ?? '';
$confirm_password = $_POST['confirm_password'] ?? '';

// ðŸ§© Validation with session-based alerts
if (!validate_username($username)) {
	$_SESSION['alert'] = "Username must be 4â€“24 chars, letters/digits/underscore only.";
	header('Location: index.php');
	exit;
}

if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
	$_SESSION['alert'] = "Invalid email address.";
	header('Location: index.php');
	exit;
}

if (!validate_password($password)) {
	$_SESSION['alert'] = "Password must be 8â€“64 characters.";
	header('Location: index.php');
	exit;
}

if ($password !== $confirm_password) {
	$_SESSION['alert'] = "Passwords do not match.";
	header('Location: index.php');
	exit;
}

$password_hash = password_hash($password, PASSWORD_BCRYPT);

$conn = get_db_connection();

// check if username or email exists
$check = $conn->prepare('SELECT id FROM users WHERE username = ? OR email = ? LIMIT 1');
$check->bind_param('ss', $username, $email);
$check->execute();
$check->store_result();

if ($check->num_rows > 0) {
	$check->close();
	$conn->close();
	$_SESSION['alert'] = "Username or email already exists.";
	header('Location: index.php');
	exit;
}

$check->close();

// insert user
$stmt = $conn->prepare('INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)');
$stmt->bind_param('sss', $username, $email, $password_hash);

if ($stmt->execute() === TRUE) {
	$user_id = $conn->insert_id;

	$token = bin2hex(random_bytes(32));
	$update_stmt = $conn->prepare('UPDATE users SET verification_token = ?, verified = 0 WHERE id = ?');
	$update_stmt->bind_param('si', $token, $user_id);
	$update_stmt->execute();
	$update_stmt->close();

	if (send_verification_email($email, $username, $token)) {
		$_SESSION['alert'] = "Registration successful! Please check your email to verify.";
	} else {
		$_SESSION['alert'] = "Registration successful, but verification email could not be sent.";
	}

	$stmt->close();
	$conn->close();

	header('Location: login.html');
	exit;
} else {
	$stmt->close();
	$conn->close();
	$_SESSION['alert'] = "Database error: " . $stmt->error;
	header('Location: index.php');
	exit;
}
?>
<?php
require_once __DIR__ . '/config.php';

$serverConn = new mysqli($_ENV['DB_HOST'], $_ENV['DB_USER'], $_ENV['DB_PASS']);
if ($serverConn->connect_error) {
    die('MySQL server connection failed: ' . $serverConn->connect_error);
}

$dbExisted = false;
$checkDbSql = "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '$_ENV[DB_NAME]'";
$checkDbRes = $serverConn->query($checkDbSql);

if ($checkDbRes) {
    $dbExisted = $checkDbRes->num_rows > 0;
    $checkDbRes->free();
}

$createDbSql = "CREATE DATABASE IF NOT EXISTS `$_ENV[DB_NAME]` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci";
if (!$serverConn->query($createDbSql)) {
    $serverConn->close();
    die('Failed to create database: ' . $serverConn->error);
}

echo $dbExisted ? "Database '$_ENV[DB_NAME]' already exists.\n" : "Database '$_ENV[DB_NAME]' created successfully.\n";

$conn = new mysqli($_ENV['DB_HOST'], $_ENV['DB_USER'], $_ENV['DB_PASS'], $_ENV['DB_NAME']);
if ($conn->connect_error) {
    $serverConn->close();
    die('Database connection failed: ' . $conn->connect_error);
}
$conn->set_charset('utf8mb4');

$tableExisted = false;
$checkTableSql = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
                  WHERE TABLE_SCHEMA = '$_ENV[DB_NAME]' AND TABLE_NAME = 'users'";
$checkTableRes = $conn->query($checkTableSql);

if ($checkTableRes) {
    $tableExisted = $checkTableRes->num_rows > 0;
    $checkTableRes->free();
}

$createTableSql = <<<SQL
CREATE TABLE IF NOT EXISTS users (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(191) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    verified TINYINT(1) DEFAULT 0,
    verification_token VARCHAR(255) NULL,
    verified_at TIMESTAMP NULL DEFAULT NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
SQL;

if (!$conn->query($createTableSql)) {
    $conn->close();
    $serverConn->close();
    die('Failed to create table: ' . $conn->error);
}

echo $tableExisted ? "Table 'users' already exists.\n" : "Table 'users' created successfully.\n";

<?php
require_once __DIR__ . '/config.php';

if (!isset($_GET['token']) || empty($_GET['token'])) {
	header('Location: login.html?error=invalid_token');
	exit;
}

$token = $_GET['token'];
$conn = get_db_connection();

$stmt = $conn->prepare('SELECT id, verified, created_at FROM users WHERE verification_token = ? AND verified = 0 LIMIT 1');
$stmt->bind_param('s', $token);
$stmt->execute();
$result = $stmt->get_result();
$user = $result->fetch_assoc();
$stmt->close();

if (!$user) {
	$conn->close();
	die('Invalid or expired verification token.');
}

$created_at = new DateTime($user['created_at']);
$now = new DateTime();
if (($now->getTimestamp() - $created_at->getTimestamp()) > (24 * 60 * 60)) {
	$conn->close();
	die('Verification token has expired. Please register again.');
}

$update_stmt = $conn->prepare('UPDATE users SET verified = 1, verified_at = NOW(), verification_token = NULL WHERE id = ?');
$update_stmt->bind_param('i', $user['id']);
$update_stmt->execute();
$update_stmt->close();

$conn->close();
?>
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Email Verified</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<div style="display: flex; flex-direction: column; align-items: center; padding: 50px; text-align: center;">
		<h2>Email Verified Successfully!</h2>
		<p>You can now <a href="login.html">log in</a> to your account.</p>
	</div>
</body>
</html>
